const userID = '4256591b-a9be-e711-811b-00155d047fea';
const loadTime = 500;

/**
 * Find the correct data for the current user;
 *
 * @param {Object[]} mockData Locally stored list of List of data
 *                            objects each containing an `Id`
 *                            property to match for the current user.
 * @param {string}   id       TSF user ID
 * @returns
 */
export const matchUser = (mockData, id) => {
  if (id === null || typeof id !== 'string' || id === '') {
    return null;
  }

  if (Array.isArray(mockData)) {
    for (let a = 0; a < mockData.length; a += 1) {
      if (mockData[a].Id === id) {
        return mockData[a];
      }
    }
  } else if (typeof mockData === 'object' && typeof mockData[id] === 'object') {
    return mockData[id];
  }

  return null;
};

/**
 * Test whether this request should fail.
 *
 * @param {Object} data Data to be submitted to the server.
 *
 * @returns {boolean} TRUE if request has one or more a properties
 *                    with the value "--FAIL--".
 *                    FALSE otherwise.
 */
export const failRequest = (data) => {
  const keys = Object.keys(data);

  if (window.location.search.match(/(?<=[?&])fail(?=[=&]|$)/)) {
    // GET variable `fail` has been set so fail request
    return true;
  }

  for (let a = 0; a < keys.length; a += 1) {
    if (typeof data[keys[a]] === 'string' && data[keys[a]].toUpperCase() === '--FAIL--') {
      // User has want's request to fail
      return true;
    }
  }

  return false;
};

/**
 * Make sure a user ID is set in Local Storage
 *
 * @returns {string} user GUID to match for getting context data
 */
export const presetUserID = () => {
  if (localStorage.getItem('userID') === null) {
    localStorage.setItem('userID', userID);
    localStorage.setItem('fail', 0);
  }

  return localStorage.getItem('userID');
};

/**
 * Check if the current request should fail
 *
 * Uses localStorage to check whether to fail next request.
 *
 * @returns {boolean} TRUE if request should fail. FALSE otherwise
 */
export const mustFail = () => {
  if (localStorage.getItem('fail') == 1) { // eslint-disable-line
    localStorage.setItem('fail', 0);
    return true;
  }

  return false;
};

/**
 * Check whether the user has set the requested to fail, if so
 * return a 500 response
 *
 * * Response body will be the request body by default.
 * * If newData is an Object, then newData will be returned.
 * * If newData is not an object an request params is not empty,
 *   request params will be returned
 *
 * @param {Request}  req     Request object generated by MSW
 * @param {Response} res     Response object generated by MSW
 * @param {Context}  ctx     Context object generated by MSW
 * @param {Object}   newData Data to return on succcessful request
 *                           (if undefined, request body will be
 *                           returned)
 * @param {string}   msg     Error message for failing request
 * @param {number}   status  HTTP status code for failing request
 *                           [default: 500 - server error]
 * @returns
 */
export const tryToFail = (req, res, ctx, newData, msg = '', status = loadTime) => {
  if (mustFail() === true) {
    // do something to cause request to fail
    return res(
      ctx.status(status),
      ctx.json(
        {
          errorMessage: (typeof msg === 'string' && msg !== '')
            ? msg
            : 'Update failed',
        },
      ),
      ctx.delay(1500),
    );
  }

  let output = req.body;

  if (typeof newData === 'object') {
    output = newData;
  } else if (req.params.length > 0) {
    output = req.params;
  }

  return res(
    ctx.json(output),
    ctx.delay(1500),
  );
};

/**
 * Get data appropriate for current user in current context
 *
 * @param {Object}   mockData Mock data keyed by user GUID
 * @param {Request}  _req     Request object generated by MSW
 * @param {Response} res      Response object generated by MSW
 * @param {Context}  ctx      Context object generated by MSW
 *
 * @returns {object} data object for user matched by user GUID
 *                   specified in local storage
 */
export const getDataForUser = (mockData, res, ctx) => {
  const output = matchUser(mockData, presetUserID());
  if (output !== null) {
    return res(ctx.json(output));
  }

  return res(
    ctx.status(500),
    ctx.json({
      errorMessage: `Could not find user matching ID: ${localStorage.getItem('userID')}`,
    }),
    ctx.delay(1500),
  );
};

/**
 * Get a single address from the Experian API dataset and return
 * just the useful bits.
 *
 * @param {object} data Experian API object
 * @param {object} req  MockServiceWorker request object
 *
 * @returns {object} an object containing a single "Address" property
 *                   with address related child properties.
 */
export const getOneAddress = (data, req) => {
  const key = req.url.search.replace(/^.*?moniker=/i, '');

  const tmp1 = data.PickListEntries.filter((item) => item.Moniker === key);

  const tmp2 = (tmp1.length === 1)
    ? tmp1[0]
    : data.PickListEntries[0];

  const tmp3 = tmp2.PartialAddress.split(',');
  tmp3[1] = tmp3[1].trim().split('  ');

  return {
    Address: {
      StreetLines: [tmp3[0], '', ''],
      Suburb: tmp3[1][0],
      State: tmp3[1][1],
      Postcode: tmp3[1][2],
    },
  };
};
